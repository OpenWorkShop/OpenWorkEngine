# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

interface IMachineFirmwareRequirement {
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    name: String
    requiredVersion: Decimal!
    suggestedVersion: Decimal!
}

interface ISerialPortOptions {
    baudRate: Int!
    dataBits: Int
    handshake: Handshake
    parity: Parity
    readBufferSize: Int
    readTimeout: Int
    rtsEnable: Boolean
    stopBits: StopBits
    writeBufferSize: Int
    writeTimeout: Int
}

union IParsedValue = ParsedAxisFlags | ParsedBool | ParsedDecimal | ParsedEnumOfApplicatorRadiusCompensation | ParsedEnumOfAxisPlane | ParsedEnumOfCircleDirection | ParsedEnumOfEnabledType | ParsedEnumOfFactorType | ParsedEnumOfFeedRateMode | ParsedEnumOfKinematicsMode | ParsedEnumOfMachineCoolantState | ParsedEnumOfMachineMotionType | ParsedEnumOfMachineOverridesMode | ParsedEnumOfMachineProgramState | ParsedEnumOfMovementDistanceType | ParsedEnumOfPathControlMode | ParsedEnumOfSpindleSpeedMode | ParsedEnumOfStatusReportType | ParsedEnumOfTimingMode | ParsedEnumOfUnitType | ParsedString

type AlertError {
    message: String!
    name: String!
}

type AppUpdates {
    checkForUpdates: Boolean!
    prereleases: Boolean!
}

type AxisFlags {
    x: Boolean!
    y: Boolean!
    z: Boolean!
}

type CommandSettings {
    commands: String!
    enabled: Boolean!
    id: String!
    mtime: Long!
    title: String!
}

type CompiledInstruction {
    line: SyntaxLine!
    source: String!
}

type ConnectedPort {
    createdAt: DateTime!
    machine: ControlledMachine!
    port: SystemPort!
    status: PortStatus!
}

type ConnectionSettings {
    firmware: MachineFirmwareSettings!
    firmwareRequirement: IMachineFirmwareRequirement!
    machineProfileId: String
    manufacturer: String
    portName: String!
    toSerialPortOptions: ISerialPortOptions!
}

type ControlledMachine {
    configuration: MachineConfiguration!
    id: String!
    logs(after: String, before: String, first: Int, last: Int, order: [MachineLogEntrySortInput!], where: MachineLogEntryFilterInput): MachineLogEntryConnection
    machineProfileId: String
    program: ProgramExecutor
    settings: FirmwareSettings!
    status: MachineStatus!
    timeline(after: String, before: String, first: Int, last: Int): MachineTimelineNodeConnection
    topicId: String!
}

type Controller {
    checkCode: MachineExecutionResult!
    configuration: MachineExecutionResult!
    controllerType: MachineControllerType!
    createdAt: DateTime!
    firmware: MachineExecutionResult!
    help: MachineExecutionResult!
    homing: MachineExecutionResult!
    id: String!
    move(moveCommand: MoveCommandInput!): MachineExecutionResult!
    parameters: MachineExecutionResult!
    pause: MachineExecutionResult!
    play: MachineExecutionResult!
    reset: MachineExecutionResult!
    setFirmwareSetting(settingChange: FirmwareSettingChangeInput!): MachineExecutionResult!
    setFirmwareSettings(settingChanges: [FirmwareSettingChangeInput!]!): [MachineExecutionResult!]!
    setModal(change: ModalChangeInput!): MachineExecutionResult!
    settings: MachineExecutionResult!
    startTask: Controller!
    startup: MachineExecutionResult!
    status: MachineExecutionResult!
    unlock: MachineExecutionResult!
    writeCommand(commandCode: String!, sourceName: String!): MachineExecutionResult!
}

type EventSettings {
    commands: String!
    enabled: Boolean!
    event: String!
    id: String!
    mtime: Long!
    trigger: String!
}

type FileSystemSettings {
    documentsDirectory: String
    mountPoints: [MountPointSettings!]!
    programsDirectory: String!
}

type FirmwareApplicatorSettings {
    laserEnabled: FirmwareSettingOfBoolean!
    settings: [FirmwareSetting!]!
    shuttleRadius: FirmwareSettingOfDecimal!
    shuttleWeight: FirmwareSettingOfDecimal!
    speedMax: FirmwareSettingOfDecimal!
    speedMin: FirmwareSettingOfDecimal!
}

type FirmwareAxisValues {
    settings: [FirmwareSetting!]!
    x: FirmwareSettingOfDecimal!
    y: FirmwareSettingOfDecimal!
    z: FirmwareSettingOfDecimal!
}

type FirmwareCalibrationSettings {
    chainElongationFactor: FirmwareSettingOfDecimal!
    chainLength: FirmwareSettingOfDecimal!
    chainOverSprocket: FirmwareSettingOfBoolean!
    chainSagCorrection: FirmwareSettingOfDecimal!
    homeChainLengths: FirmwareSettingOfDecimal!
    kinematics: FirmwareSettingOfKinematicsMode!
    leftChainTolerance: FirmwareSettingOfDecimal!
    motorDistance: FirmwareAxisValues!
    rightChainTolerance: FirmwareSettingOfDecimal!
    scaling: FirmwareAxisValues!
    settings: [FirmwareSetting!]!
}

type FirmwareComparisonNodeOfDecimal {
    detectedValue: Decimal!
    hasDetectedValue: Boolean!
    meetsRequirement: Boolean!
    requiredValue: Decimal!
}

type FirmwareComparisonNodeOfString {
    detectedValue: String
    hasDetectedValue: Boolean!
    meetsRequirement: Boolean!
    requiredValue: String
}

type FirmwareHomingSettings {
    debounce: FirmwareSettingOfDecimal!
    directionInvert: FirmwareSettingOfAxisFlags!
    enabled: FirmwareSettingOfBoolean!
    feedRate: FirmwareSettingOfDecimal!
    pullOff: FirmwareSettingOfDecimal!
    seekRate: FirmwareSettingOfDecimal!
    settings: [FirmwareSetting!]!
}

type FirmwareMovementSettings {
    acceleration: FirmwareAxisValues!
    arcTolerance: FirmwareSettingOfDecimal!
    hardLimits: FirmwareSettingOfBoolean!
    junctionDeviation: FirmwareSettingOfDecimal!
    machineSize: FirmwareAxisValues!
    positionMax: FirmwareAxisValues!
    positionMin: FirmwareAxisValues!
    rateMax: FirmwareAxisValues!
    settings: [FirmwareSetting!]!
    softLimits: FirmwareSettingOfBoolean!
}

type FirmwarePinsSettings {
    imax: FirmwareAxisValues!
    kDerivative: FirmwareAxisValues!
    kIntegral: FirmwareAxisValues!
    kProportional: FirmwareAxisValues!
    limitPinsInvert: FirmwareSettingOfBoolean!
    probePinInvert: FirmwareSettingOfBoolean!
    settings: [FirmwareSetting!]!
    stepDirectionInvert: FirmwareSettingOfAxisFlags!
    stepEnableInvert: FirmwareSettingOfBoolean!
    stepIdleDelay: FirmwareSettingOfDecimal!
    stepPulse: FirmwareSettingOfDecimal!
    stepSignalInvert: FirmwareSettingOfAxisFlags!
    steps: FirmwareAxisValues!
}

type FirmwareReportingSettings {
    reportInches: FirmwareSettingOfBoolean!
    settings: [FirmwareSetting!]!
    statusReport: FirmwareSettingOfStatusReportType!
}

type FirmwareRequirement implements IMachineFirmwareRequirement {
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    name: String
    requiredVersion: Decimal!
    suggestedVersion: Decimal!
}

type FirmwareSetting {
    comment: String
    currentValue: IParsedValue
    defaultValue: IParsedValue
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfAxisFlags {
    comment: String
    currentValue: IParsedValue
    data: AxisFlags!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: AxisFlagsInput!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfBoolean {
    comment: String
    currentValue: IParsedValue
    data: Boolean!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: Boolean!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfDecimal {
    comment: String
    currentValue: IParsedValue
    data: Decimal!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: Decimal!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfKinematicsMode {
    comment: String
    currentValue: IParsedValue
    data: KinematicsMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: KinematicsMode!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfStatusReportType {
    comment: String
    currentValue: IParsedValue
    data: StatusReportType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: StatusReportType!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettingOfString {
    comment: String
    currentValue: IParsedValue
    data: String!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: String!): InstructionStep!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type FirmwareSettings {
    applicator: FirmwareApplicatorSettings!
    calibration: FirmwareCalibrationSettings!
    homing: FirmwareHomingSettings!
    movement: FirmwareMovementSettings!
    pins: FirmwarePinsSettings!
    reporting: FirmwareReportingSettings!
    settings: [FirmwareSetting!]!
}

type InstructionStep {
    movement: MachineMovement
    name: String!
    settingId: String!
    settingValue: String!
    value: Decimal
    willChangeSetting: Boolean!
}

type KeyValuePairOfApplicatorRadiusCompensationAndInt32 {
    key: ApplicatorRadiusCompensation!
    value: Int!
}

type KeyValuePairOfAxisPlaneAndInt32 {
    key: AxisPlane!
    value: Int!
}

type KeyValuePairOfCircleDirectionAndInt32 {
    key: CircleDirection!
    value: Int!
}

type KeyValuePairOfEnabledTypeAndInt32 {
    key: EnabledType!
    value: Int!
}

type KeyValuePairOfFactorTypeAndInt32 {
    key: FactorType!
    value: Int!
}

type KeyValuePairOfFeedRateModeAndInt32 {
    key: FeedRateMode!
    value: Int!
}

type KeyValuePairOfKinematicsModeAndInt32 {
    key: KinematicsMode!
    value: Int!
}

type KeyValuePairOfMachineCoolantStateAndInt32 {
    key: MachineCoolantState!
    value: Int!
}

type KeyValuePairOfMachineMotionTypeAndInt32 {
    key: MachineMotionType!
    value: Int!
}

type KeyValuePairOfMachineOverridesModeAndInt32 {
    key: MachineOverridesMode!
    value: Int!
}

type KeyValuePairOfMachineProgramStateAndInt32 {
    key: MachineProgramState!
    value: Int!
}

type KeyValuePairOfMovementDistanceTypeAndInt32 {
    key: MovementDistanceType!
    value: Int!
}

type KeyValuePairOfPathControlModeAndInt32 {
    key: PathControlMode!
    value: Int!
}

type KeyValuePairOfSpindleSpeedModeAndInt32 {
    key: SpindleSpeedMode!
    value: Int!
}

type KeyValuePairOfStatusReportTypeAndInt32 {
    key: StatusReportType!
    value: Int!
}

type KeyValuePairOfTimingModeAndInt32 {
    key: TimingMode!
    value: Int!
}

type KeyValuePairOfUnitTypeAndInt32 {
    key: UnitType!
    value: Int!
}

type MachineAlert {
    code: String!
    message: String!
    name: String!
    type: MachineAlertType!
}

type MachineApplicatorState {
    coolant: ModalSettingOfMachineCoolantState!
    feedRate: FirmwareSettingOfDecimal!
    isOn: Boolean!
    lengthOffset: MachinePosition
    lengthOffsetFactorType: ModalSettingOfFactorType!
    probePosition: MachinePosition
    radiusCompensation: ModalSettingOfApplicatorRadiusCompensation!
    spinDirection: ModalSettingOfCircleDirection!
    spinSpeed: FirmwareSettingOfDecimal!
    temperature: FirmwareSettingOfDecimal!
    toolId: FirmwareSettingOfString!
}

type MachineAxis {
    accuracy: Decimal!
    id: String!
    machineProfiles: [MachineProfile!]!
    max: Decimal!
    min: Decimal!
    name: AxisName!
    precision: Decimal!
}

type MachineAxisSettings {
    accuracy: Decimal!
    id: String
    max: Decimal!
    min: Decimal!
    name: AxisName!
    precision: Decimal!
}

type MachineBuffer {
    availableReceive: Int!
    availableSend: Int!
    canReceive: Boolean!
    lastInstructionResult: MachineInstructionResult
    lineNumber: Int!
    pendingInstructionResults: [MachineInstructionResult!]!
    responseQueueLength: Int!
    writeQueueLength: Int!
}

type MachineCommand {
    id: String!
    machineProfiles: [MachineProfile!]!
    name: String!
    syntax: ProgramSyntax!
    value: String!
}

type MachineCommandSettings {
    id: String!
    name: String!
    syntax: ProgramSyntax!
    value: String!
}

type MachineConfiguration {
    firmware: MachineDetectedFirmware!
    modals: MachineModals!
    options: MachineOptions
    referencePosition: [MachinePosition!]!
    workCoordinates: [MachinePosition!]!
    workOffset: MachinePosition!
}

type MachineDetectedFirmware {
    edition: FirmwareComparisonNodeOfString!
    friendlyName: String
    isValid: Boolean!
    meetsRequirements: Boolean!
    name: FirmwareComparisonNodeOfString!
    protocol: FirmwareComparisonNodeOfString!
    requirement: FirmwareRequirement!
    version: FirmwareComparisonNodeOfDecimal!
    welcomeMessage: String
}

type MachineExecutionResult {
    instructionResults: [MachineInstructionResult!]!
    machine: ControlledMachine!
}

type MachineFeature {
    description: String
    disabled: Boolean!
    icon: String
    id: String!
    key: String!
    machineProfiles: [MachineProfile!]!
    title: String
}

type MachineFeatureSettings {
    description: String
    disabled: Boolean!
    icon: String
    id: String
    key: String!
    title: String
}

type MachineFirmware implements IMachineFirmwareRequirement {
    baudRate: Decimal!
    baudRateValue: Int!
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    id: String!
    machineProfiles: [MachineProfile!]!
    name: String!
    requiredVersion: Decimal!
    rtscts: Boolean!
    suggestedVersion: Decimal!
}

type MachineFirmwareSettings implements IMachineFirmwareRequirement {
    baudRate: BaudRate
    baudRateValue: Int!
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    id: String
    name: String
    requiredVersion: Decimal!
    rtscts: Boolean!
    suggestedVersion: Decimal!
}

type MachineInstructionResult {
    apply: [InstructionStep!]!
    instruction: CompiledInstruction!
    machine: ControlledMachine!
    responseLogEntry: MachineLogEntry
    writeLogEntry: MachineLogEntry!
}

type MachineLogEntry {
    canMergeWith: Boolean!
    code: [SyntaxChunk!]!
    count: Int!
    error: MachineAlert
    id: Int!
    isResponse: Boolean!
    logLevel: MachineLogLevel!
    message: String!
    source: MachineLogSource!
    timestamp: DateTime!
    timestamps: [DateTime!]!
    writeState: SerialWriteState!
}

"A connection to a list of items."
type MachineLogEntryConnection {
    "A list of edges."
    edges: [MachineLogEntryEdge!]
    "A flattened list of the nodes."
    nodes: [MachineLogEntry!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type MachineLogEntryEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: MachineLogEntry!
}

type MachineModals {
    arcDistance: ModalSettingOfMovementDistanceType!
    cannedCycleReturnMode: ModalSettingOfTimingMode!
    cylindricalInterpolation: ModalSettingOfEnabledType!
    distance: ModalSettingOfMovementDistanceType!
    feedRate: ModalSettingOfFeedRateMode!
    motion: ModalSettingOfMachineMotionType!
    pathControlMode: ModalSettingOfPathControlMode!
    plane: ModalSettingOfAxisPlane!
    programState: ModalSettingOfMachineProgramState!
    settings: [FirmwareSetting!]!
    spindleSpeed: ModalSettingOfSpindleSpeedMode!
    units: ModalSettingOfUnitType!
    userDefined: ModalSettingOfDecimal!
    workCoordinateSystem: ModalSettingOfDecimal!
}

type MachineMovement {
    a: Decimal
    arcDirection: CircleDirection
    b: Decimal
    c: Decimal
    dwell: Decimal
    i: Decimal
    j: Decimal
    k: Decimal
    u: Decimal
    v: Decimal
    w: Decimal
    x: Decimal
    y: Decimal
    z: Decimal
}

type MachineOptions {
    raw: String!
}

type MachineOverrides {
    feed: FirmwareSettingOfDecimal!
    mode: ModalSettingOfMachineOverridesMode!
    rapids: FirmwareSettingOfDecimal!
    speed: FirmwareSettingOfDecimal!
}

type MachinePart {
    dataBlob: String!
    description: String
    id: String!
    isDefault: Boolean!
    machineProfiles: [MachineProfile!]!
    optional: Boolean!
    partType: MachinePartType!
    settings: [MachinePresetSetting!]!
    sortOrder: Int!
    specs: [MachineSpec!]!
    title: String
}

type MachinePartSettings {
    dataBlob: String!
    description: String
    id: String
    isDefault: Boolean!
    optional: Boolean!
    partType: MachinePartType!
    settings: [MachineSettingSettings!]!
    specs: [MachineSpecSettings!]!
    title: String!
}

type MachinePosition {
    a: Decimal
    b: Decimal
    c: Decimal
    u: Decimal
    v: Decimal
    w: Decimal
    x: Decimal
    y: Decimal
    z: Decimal
}

type MachinePresetSetting {
    id: String!
    key: String!
    machineParts: [MachinePart!]!
    settingType: MachineSettingType!
    title: String
    value: String!
}

type MachineProfile {
    axes: [MachineAxis!]!
    brand: String
    commands: [MachineCommand!]!
    description: String
    discontinued: Boolean!
    featured: Boolean!
    features: [MachineFeature!]!
    firmware: [MachineFirmware!]!
    icon: String!
    id: String!
    machineCategory: MachineCategory!
    model: String!
    name: String!
    parts: [MachinePart!]!
}

type MachineSettingSettings {
    id: String!
    key: String!
    settingType: MachineSettingType!
    title: String
    value: String!
}

type MachineSpec {
    id: String!
    machineParts: [MachinePart!]!
    specType: MachineSpecType!
    value: Decimal!
}

type MachineSpecSettings {
    id: String!
    specType: MachineSpecType!
    value: Decimal!
}

type MachineStatus {
    activePins: [MachinePinType!]!
    activityState: ActiveState!
    alarm: MachineAlert
    applicator: MachineApplicatorState!
    buffer: MachineBuffer!
    machinePosition: MachinePosition!
    overrides: MachineOverrides!
    workCoordinateOffset: MachinePosition
    workPosition: MachinePosition
}

type MachineTimelineNode {
    logEntries: [MachineLogEntry!]!
    logLevel: MachineLogLevel!
}

"A connection to a list of items."
type MachineTimelineNodeConnection {
    "A list of edges."
    edges: [MachineTimelineNodeEdge!]
    "A flattened list of the nodes."
    nodes: [MachineTimelineNode!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type MachineTimelineNodeEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: MachineTimelineNode!
}

type MacroSettings {
    content: String!
    id: String!
    mtime: Long!
    name: String!
}

type MakerHubSettings {
    enabled: Boolean!
}

type ModalOptionOfApplicatorRadiusCompensation {
    code: String!
    data: ApplicatorRadiusCompensation!
    value: String!
}

type ModalOptionOfAxisPlane {
    code: String!
    data: AxisPlane!
    value: String!
}

type ModalOptionOfCircleDirection {
    code: String!
    data: CircleDirection!
    value: String!
}

type ModalOptionOfDecimal {
    code: String!
    data: Decimal!
    value: String!
}

type ModalOptionOfEnabledType {
    code: String!
    data: EnabledType!
    value: String!
}

type ModalOptionOfFactorType {
    code: String!
    data: FactorType!
    value: String!
}

type ModalOptionOfFeedRateMode {
    code: String!
    data: FeedRateMode!
    value: String!
}

type ModalOptionOfMachineCoolantState {
    code: String!
    data: MachineCoolantState!
    value: String!
}

type ModalOptionOfMachineMotionType {
    code: String!
    data: MachineMotionType!
    value: String!
}

type ModalOptionOfMachineOverridesMode {
    code: String!
    data: MachineOverridesMode!
    value: String!
}

type ModalOptionOfMachineProgramState {
    code: String!
    data: MachineProgramState!
    value: String!
}

type ModalOptionOfMovementDistanceType {
    code: String!
    data: MovementDistanceType!
    value: String!
}

type ModalOptionOfPathControlMode {
    code: String!
    data: PathControlMode!
    value: String!
}

type ModalOptionOfSpindleSpeedMode {
    code: String!
    data: SpindleSpeedMode!
    value: String!
}

type ModalOptionOfTimingMode {
    code: String!
    data: TimingMode!
    value: String!
}

type ModalOptionOfUnitType {
    code: String!
    data: UnitType!
    value: String!
}

type ModalSettingOfApplicatorRadiusCompensation {
    comment: String
    currentValue: IParsedValue
    data: ApplicatorRadiusCompensation!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: ApplicatorRadiusCompensation!): InstructionStep!
    options: [ModalOptionOfApplicatorRadiusCompensation!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfAxisPlane {
    comment: String
    currentValue: IParsedValue
    data: AxisPlane!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: AxisPlane!): InstructionStep!
    options: [ModalOptionOfAxisPlane!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfCircleDirection {
    comment: String
    currentValue: IParsedValue
    data: CircleDirection!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: CircleDirection!): InstructionStep!
    options: [ModalOptionOfCircleDirection!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfDecimal {
    comment: String
    currentValue: IParsedValue
    data: Decimal!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: Decimal!): InstructionStep!
    options: [ModalOptionOfDecimal!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfEnabledType {
    comment: String
    currentValue: IParsedValue
    data: EnabledType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: EnabledType!): InstructionStep!
    options: [ModalOptionOfEnabledType!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfFactorType {
    comment: String
    currentValue: IParsedValue
    data: FactorType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: FactorType!): InstructionStep!
    options: [ModalOptionOfFactorType!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfFeedRateMode {
    comment: String
    currentValue: IParsedValue
    data: FeedRateMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: FeedRateMode!): InstructionStep!
    options: [ModalOptionOfFeedRateMode!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfMachineCoolantState {
    comment: String
    currentValue: IParsedValue
    data: MachineCoolantState!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: MachineCoolantState!): InstructionStep!
    options: [ModalOptionOfMachineCoolantState!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfMachineMotionType {
    comment: String
    currentValue: IParsedValue
    data: MachineMotionType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: MachineMotionType!): InstructionStep!
    options: [ModalOptionOfMachineMotionType!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfMachineOverridesMode {
    comment: String
    currentValue: IParsedValue
    data: MachineOverridesMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: MachineOverridesMode!): InstructionStep!
    options: [ModalOptionOfMachineOverridesMode!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfMachineProgramState {
    comment: String
    currentValue: IParsedValue
    data: MachineProgramState!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: MachineProgramState!): InstructionStep!
    options: [ModalOptionOfMachineProgramState!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfMovementDistanceType {
    comment: String
    currentValue: IParsedValue
    data: MovementDistanceType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: MovementDistanceType!): InstructionStep!
    options: [ModalOptionOfMovementDistanceType!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfPathControlMode {
    comment: String
    currentValue: IParsedValue
    data: PathControlMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: PathControlMode!): InstructionStep!
    options: [ModalOptionOfPathControlMode!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfSpindleSpeedMode {
    comment: String
    currentValue: IParsedValue
    data: SpindleSpeedMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: SpindleSpeedMode!): InstructionStep!
    options: [ModalOptionOfSpindleSpeedMode!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfTimingMode {
    comment: String
    currentValue: IParsedValue
    data: TimingMode!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: TimingMode!): InstructionStep!
    options: [ModalOptionOfTimingMode!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type ModalSettingOfUnitType {
    comment: String
    currentValue: IParsedValue
    data: UnitType!
    hasBeenRead: Boolean!
    id: String!
    index: Int!
    key: String!
    mutation(value: UnitType!): InstructionStep!
    options: [ModalOptionOfUnitType!]!
    settingType: MachineSettingType!
    title: String
    units: MachineSettingUnits!
    value: String!
    valueCode: String!
}

type MountPointSettings {
    route: String!
    target: String!
}

type Mutation {
    changeWorkspacePort(portName: String!, workspaceId: String!): Workspace!
    closePort(portName: String!): SystemPort!
    closeWorkspace(workspaceId: String!): Workspace!
    controlMachine(workspaceId: String!): Controller!
    createWorkspace(workspaceSettings: WorkspaceSettingsInput!): Workspace!
    deleteWorkspace(workspaceId: String!): Workspace!
    openPort(firmware: FirmwareRequirementInput!, options: SerialPortOptionsInput!, portName: String!): SystemPort!
    openWorkspace(workspaceId: String!): Workspace!
    "Create a metadata object to represent a file selection before uploading."
    selectProgramFile(fileUpload: ClientFileUploadInput!): ProgramFileMeta!
    updateWorkspace(workspaceSettings: WorkspaceSettingsInput!): Workspace!
    "Accept the text (body) of a file and (over)write the file on the server."
    uploadProgramFile(fileUpload: ProgramFileUploadInput!): ProgramFile!
}

type OpenControllerSession {
    roles: [String!]!
    token: String!
    user: OpenControllerUser!
}

type OpenControllerSettings {
    appUpdates: AppUpdates!
    commands: [CommandSettings!]!
    events: [EventSettings!]!
    fileSystem: FileSystemSettings!
    hub: MakerHubSettings!
    macros: [MacroSettings!]!
    users: [OpenControllerUser!]!
    workspaces: [WorkspaceSettings!]!
}

type OpenControllerUser {
    authenticationType: String!
    enabled: Boolean!
    id: String
    tokens: [String!]!
    username: String!
}

"Information about pagination in a connection."
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "Indicates whether more edges exist following the set defined by the clients arguments."
    hasNextPage: Boolean!
    "Indicates whether more edges exist prior the set defined by the clients arguments."
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type ParsedAxisFlags {
    valueAxisFlags: AxisFlags!
    valueCode: String!
    valueString: String!
}

type ParsedBool {
    valueBool: Boolean!
    valueCode: String!
    valueString: String!
}

type ParsedDecimal {
    valueCode: String!
    valueDecimal: Decimal!
    valueString: String!
}

type ParsedEnumOfApplicatorRadiusCompensation {
    valueCode: String!
    valueEnum: ApplicatorRadiusCompensation!
    valueString: String!
    values: [KeyValuePairOfApplicatorRadiusCompensationAndInt32!]!
}

type ParsedEnumOfAxisPlane {
    valueCode: String!
    valueEnum: AxisPlane!
    valueString: String!
    values: [KeyValuePairOfAxisPlaneAndInt32!]!
}

type ParsedEnumOfCircleDirection {
    valueCode: String!
    valueEnum: CircleDirection!
    valueString: String!
    values: [KeyValuePairOfCircleDirectionAndInt32!]!
}

type ParsedEnumOfEnabledType {
    valueCode: String!
    valueEnum: EnabledType!
    valueString: String!
    values: [KeyValuePairOfEnabledTypeAndInt32!]!
}

type ParsedEnumOfFactorType {
    valueCode: String!
    valueEnum: FactorType!
    valueString: String!
    values: [KeyValuePairOfFactorTypeAndInt32!]!
}

type ParsedEnumOfFeedRateMode {
    valueCode: String!
    valueEnum: FeedRateMode!
    valueString: String!
    values: [KeyValuePairOfFeedRateModeAndInt32!]!
}

type ParsedEnumOfKinematicsMode {
    valueCode: String!
    valueEnum: KinematicsMode!
    valueString: String!
    values: [KeyValuePairOfKinematicsModeAndInt32!]!
}

type ParsedEnumOfMachineCoolantState {
    valueCode: String!
    valueEnum: MachineCoolantState!
    valueString: String!
    values: [KeyValuePairOfMachineCoolantStateAndInt32!]!
}

type ParsedEnumOfMachineMotionType {
    valueCode: String!
    valueEnum: MachineMotionType!
    valueString: String!
    values: [KeyValuePairOfMachineMotionTypeAndInt32!]!
}

type ParsedEnumOfMachineOverridesMode {
    valueCode: String!
    valueEnum: MachineOverridesMode!
    valueString: String!
    values: [KeyValuePairOfMachineOverridesModeAndInt32!]!
}

type ParsedEnumOfMachineProgramState {
    valueCode: String!
    valueEnum: MachineProgramState!
    valueString: String!
    values: [KeyValuePairOfMachineProgramStateAndInt32!]!
}

type ParsedEnumOfMovementDistanceType {
    valueCode: String!
    valueEnum: MovementDistanceType!
    valueString: String!
    values: [KeyValuePairOfMovementDistanceTypeAndInt32!]!
}

type ParsedEnumOfPathControlMode {
    valueCode: String!
    valueEnum: PathControlMode!
    valueString: String!
    values: [KeyValuePairOfPathControlModeAndInt32!]!
}

type ParsedEnumOfSpindleSpeedMode {
    valueCode: String!
    valueEnum: SpindleSpeedMode!
    valueString: String!
    values: [KeyValuePairOfSpindleSpeedModeAndInt32!]!
}

type ParsedEnumOfStatusReportType {
    valueCode: String!
    valueEnum: StatusReportType!
    valueString: String!
    values: [KeyValuePairOfStatusReportTypeAndInt32!]!
}

type ParsedEnumOfTimingMode {
    valueCode: String!
    valueEnum: TimingMode!
    valueString: String!
    values: [KeyValuePairOfTimingModeAndInt32!]!
}

type ParsedEnumOfUnitType {
    valueCode: String!
    valueEnum: UnitType!
    valueString: String!
    values: [KeyValuePairOfUnitTypeAndInt32!]!
}

type ParsedString {
    valueCode: String!
    valueString: String!
}

type PortOptions implements ISerialPortOptions {
    baudRate: Int!
    dataBits: Int
    handshake: Handshake
    parity: Parity
    readBufferSize: Int
    readTimeout: Int
    rtsEnable: Boolean
    stopBits: StopBits
    writeBufferSize: Int
    writeTimeout: Int
}

type PortStatus {
    bytesToRead: Int!
    bytesToWrite: Int!
    charactersRead: Int!
    charactersWritten: Int!
    isOpen: Boolean!
    linesRead: Int!
    linesWritten: Int!
}

type ProgramExecutor {
    currentInstruction: ProgramInstruction
    id: String!
    instructionCount: Int!
    instructionIndex: Int!
    instructions(after: String, before: String, first: Int, last: Int, order: [ProgramInstructionSortInput!], where: MachineLogEntryFilterInput): ProgramInstructionConnection
    programFile: ProgramFile!
    state: ExecutionState!
}

type ProgramFile {
    id: String!
    instructionCount: Int!
    instructions: [CompiledInstruction!]!
    lineCount: Int!
    lines: [CompiledInstruction!]!
    meta: ProgramFileMeta!
}

type ProgramFileDirectory {
    allPrograms: [ProgramFileMeta!]!
    fileExtensions: [String!]!
    path: String!
}

type ProgramFileMeta {
    directory: String!
    fileExists: Boolean!
    filePath: String!
    lastModified: Long!
    name: String!
    size: Long!
    syntax: ProgramSyntax!
    type: String!
}

type ProgramInstruction {
    compiledInstruction: CompiledInstruction!
    index: Int!
    steps: [InstructionStep!]!
}

"A connection to a list of items."
type ProgramInstructionConnection {
    "A list of edges."
    edges: [ProgramInstructionEdge!]
    "A flattened list of the nodes."
    nodes: [ProgramInstruction!]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type ProgramInstructionEdge {
    "A cursor for use in pagination."
    cursor: String!
    "The item at the end of the edge."
    node: ProgramInstruction!
}

type Query {
    authenticate(token: String!): OpenControllerSession!
    getPort(portName: String!): SystemPort!
    getSettings: OpenControllerSettings!
    getWorkspace(workspaceId: String!): Workspace!
    listPorts: [SystemPort!]!
    listWorkspaces: [Workspace!]!
    "Open a program file by its name, parsing the contents."
    loadProgram(name: String!): ProgramFile!
    machineProfile(id: String!): MachineProfile!
    machineProfileCount: Int!
    machineProfiles(query: String): [MachineProfile!]!
    me: UserProfile
    "List all of the programs which exist in the program directory."
    programDirectory: ProgramFileDirectory!
    userProfile(id: String!): UserProfile!
}

type Subscription {
    onMachineConfiguration(portName: String!): ControlledMachine!
    onMachineLog(portName: String!): ControlledMachine!
    onMachineProgram(portName: String!): ControlledMachine!
    onMachineSetting(portName: String!): ControlledMachine!
    onMachineStatus(portName: String!): ControlledMachine!
    onPortChange: SystemPort!
    onWorkspaceChange: Workspace!
}

type SyntaxChunk {
    comment: String!
    comments: [String!]!
    isCode: Boolean!
    isValid: Boolean!
    type: SyntaxType!
    value: String!
}

type SyntaxLine {
    chunks: [SyntaxChunk!]!
    hasCode: Boolean!
    isValid: Boolean!
    raw: String!
}

type SystemPort {
    connection: ConnectedPort
    error: AlertError
    options: PortOptions!
    portName: String!
    state: PortState!
    topicId: String!
}

type UserProfile {
    authenticationType: String
    email: String
    id: String
    username: String
}

type Workspace {
    error: AlertError
    id: String!
    port: SystemPort
    portName: String!
    settings: WorkspaceSettings!
    state: WorkspaceState!
    topicId: String!
}

type WorkspaceSettings {
    autoReconnect: Boolean!
    axes: [MachineAxisSettings!]!
    bkColor: String
    color: String
    commands: [MachineCommandSettings!]!
    connection: ConnectionSettings!
    features: [MachineFeatureSettings!]!
    icon: String
    id: String!
    machineCategory: MachineCategory!
    machineProfileId: String
    name: String!
    onboarded: Boolean!
    parts: [MachinePartSettings!]!
    path: String!
    preferImperial: Boolean!
}

enum ActiveState {
    ALARM
    CHECK
    DOOR
    HOLD
    HOME
    IDLE_READY
    INITIALIZING
    RUN
    SLEEP
}

enum ApplicatorRadiusCompensation {
    DYNAMIC_LEFT
    DYNAMIC_RIGHT
    LEFT
    NONE
    RIGHT
}

enum ApplyPolicy {
    AFTER_RESOLVER
    BEFORE_RESOLVER
}

enum AxisName {
    A
    B
    C
    U
    V
    W
    X
    Y
    Z
}

enum AxisPlane {
    XY
    XZ
    YZ
}

enum BaudRate {
    BR115200
    BR19200
    BR2400
    BR250000
    BR38400
    BR57600
    BR9600
}

enum CircleDirection {
    CCW
    CW
    NONE
}

enum EnabledType {
    DISABLED
    ENABLED
}

enum ExecutionState {
    COMPLETE
    PAUSED
    READY
    RUNNING
}

enum FactorType {
    NEGATIVE
    NONE
    POSITIVE
}

enum FeedRateMode {
    INVERSE_TIME
    UNITS_PER_MINUTE
    UNITS_PER_REVOLUTION
}

enum Handshake {
    NONE
    REQUEST_TO_SEND
    REQUEST_TO_SEND_X_ON_X_OFF
    X_ON_X_OFF
}

enum KinematicsMode {
    LINEAR
    TRIANGULAR
}

enum MachineAlertType {
    ALARM
    ERROR
    EXCEPTION
}

enum MachineCategory {
    CNC
    TDP
}

enum MachineControllerType {
    GRBL
    MARLIN
    MASLOW
    SMOOTHIE
    TINY_G
    UNKNOWN
}

enum MachineCoolantState {
    ALL
    FLOOD
    MIST
    NONE
}

enum MachineLogLevel {
    CFG
    DBG
    ERR
    INF
    WRN
}

enum MachineLogSource {
    SERIAL_READ
    SERIAL_WRITE
}

enum MachineMotionType {
    ARC
    ARC_CCW
    CANCEL
    DWELL
    LINEAR
    PROBE
    RAPID
}

enum MachineOverridesMode {
    ALL
    FEEDS
    NONE
    SPEEDS
}

enum MachinePartType {
    AXIS_MOTOR
    BOARD
    EMERGENCY_STOP
    HEATBED
    HOTEND
    LIMIT_SWITCHES
    MMU
    NOZZLE
    PSU
    SHIELD
    SLED
    SPINDLE
    UNKNOWN
}

enum MachinePinType {
    A
    D
    H
    P
    R
    S
    X
    Y
    Z
}

enum MachineProgramState {
    AUTOMATIC_CHANGE
    COMPULSORY_STOP
    END_OF_PROGRAM
    MANUAL_CHANGE
    OPTIONAL_STOP
}

enum MachineSettingType {
    ACCELERATION
    APPLICATOR_WEIGHT
    ARC_TOLERANCE
    AXIS_SCALE
    CHAIN_ELONGATION_FACTOR
    CHAIN_LENGTH
    CHAIN_OVER_SPROCKET
    CHAIN_SAG_CORRECTION
    CHAIN_TOLERANCE_LEFT
    CHAIN_TOLERANCE_RIGHT
    DIRECTION_PORT_INVERT
    DIST_BETWEEN_MOTORS
    GRBL
    HARD_LIMITS
    HOMING_CYCLE
    HOMING_DEBOUNCE
    HOMING_DIRECTION_INVERT
    HOMING_FEED
    HOMING_PULL_OFF
    HOMING_SEEK
    IMAX
    JUNCTION_DEVIATION
    KV
    LASER_MODE
    LIMIT_PINS_INVERT
    MACHINE_SIZE
    MAX_SPINDLE_SPEED
    MIN_SPINDLE_SPEED
    MOTOR_OFFSET_Y
    PID_KD
    PID_KI
    PID_KP
    PROBE_PIN_INVERT
    RATE_MAX
    REPORT_INCHES
    ROTATION_DISK_RADIUS
    SIMPLE_KINEMATICS
    SOFT_LIMITS
    STATUS_REPORT
    STEPS
    STEP_ENABLE_INVERT
    STEP_IDLE_DELAY
    STEP_PORT_INVERT
    STEP_PULSE
    TRAVEL_MAX
    TRAVEL_MIN
}

enum MachineSettingUnits {
    MICROSECONDS
    MILLIMETERS
    MILLIMETERS_PER_MINUTE
    MILLIMETERS_PER_SECONDS_SQUARED
    MILLISECONDS
    NEWTONS
    PERCENT
    PID
    RPM
    STEPS_PER_MILLIMETER
    UNKNOWN
}

enum MachineSpecType {
    MAX_AMPS
    MAX_LAYER_HEIGHT
    MAX_RPM
    MAX_TEMP
    MAX_TRAVEL_SPEED
    MAX_VOLTS
    MAX_WATTS
    MIN_LAYER_HEIGHT
    NUMBER_OF_MATERIALS
    TIP_SIZE
    WATTS
    WAVE_LENGTH
}

enum MovementDistanceType {
    ABSOLUTE
    RELATIVE
}

enum Parity {
    EVEN
    MARK
    NONE
    ODD
    SPACE
}

enum PathControlMode {
    BLENDED
    EXACT
}

enum PortState {
    ACTIVE
    ERROR
    HAS_DATA
    HAS_FIRMWARE
    OPENING
    READY
    STARTUP
    UNPLUGGED
}

enum ProgramSyntax {
    G_CODE
}

enum SerialWriteState {
    ERROR
    NONE
    OK
    QUEUED
    SENT
}

enum SortEnumType {
    ASC
    DESC
}

enum SpindleSpeedMode {
    CONSTANT_SPINDLE_SPEED
    CONSTANT_SURFACE_SPEED
}

enum StatusReportType {
    BUFFER_DATA
    POSITION
}

enum StopBits {
    NONE
    ONE
    ONE_POINT_FIVE
    TWO
}

enum SyntaxType {
    KEYWORD
    OPERATOR
    UNKNOWN
    VALUE
}

enum TimingMode {
    PER_MINUTE
    PER_REVOLUTION
}

enum UnitType {
    IMPERIAL
    METRIC
}

enum WorkspaceState {
    ACTIVE
    CLOSED
    DELETED
    DISCONNECTED
    ERROR
    OPENING
}

input AxisFlagsInput {
    x: Boolean!
    y: Boolean!
    z: Boolean!
}

input BooleanOperationFilterInput {
    eq: Boolean
    neq: Boolean
}

input ClientFileUploadInput {
    lastModified: Long!
    name: String!
    size: Long!
    type: String!
}

input ComparableDateTimeOperationFilterInput {
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    neq: DateTime
    ngt: DateTime
    ngte: DateTime
    nin: [DateTime!]
    nlt: DateTime
    nlte: DateTime
}

input ComparableInt32OperationFilterInput {
    eq: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    neq: Int
    ngt: Int
    ngte: Int
    nin: [Int!]
    nlt: Int
    nlte: Int
}

input CompiledInstructionSortInput {
    line: SyntaxLineSortInput
    source: SortEnumType
}

input ConnectionSettingsInput {
    firmware: MachineFirmwareSettingsInput!
    machineProfileId: String
    manufacturer: String
    portName: String!
}

input FirmwareRequirementInput {
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    name: String
    requiredVersion: Decimal!
    suggestedVersion: Decimal!
}

input FirmwareSettingChangeInput {
    id: String!
    value: String!
}

input ListComparableDateTimeOperationFilterInput {
    all: ComparableDateTimeOperationFilterInput
    any: Boolean
    none: ComparableDateTimeOperationFilterInput
    some: ComparableDateTimeOperationFilterInput
}

input ListFilterInputTypeOfSyntaxChunkFilterInput {
    all: SyntaxChunkFilterInput
    any: Boolean
    none: SyntaxChunkFilterInput
    some: SyntaxChunkFilterInput
}

input ListStringOperationFilterInput {
    all: StringOperationFilterInput
    any: Boolean
    none: StringOperationFilterInput
    some: StringOperationFilterInput
}

input MachineAlertFilterInput {
    and: [MachineAlertFilterInput!]
    code: StringOperationFilterInput
    message: StringOperationFilterInput
    name: StringOperationFilterInput
    or: [MachineAlertFilterInput!]
    type: MachineAlertTypeOperationFilterInput
}

input MachineAlertSortInput {
    code: SortEnumType
    message: SortEnumType
    name: SortEnumType
    type: SortEnumType
}

input MachineAlertTypeOperationFilterInput {
    eq: MachineAlertType
    in: [MachineAlertType!]
    neq: MachineAlertType
    nin: [MachineAlertType!]
}

input MachineAxisSettingsInput {
    accuracy: Decimal!
    id: String
    max: Decimal!
    min: Decimal!
    name: AxisName!
    precision: Decimal!
}

input MachineCommandSettingsInput {
    id: String!
    name: String!
    syntax: ProgramSyntax!
    value: String!
}

input MachineFeatureSettingsInput {
    description: String
    disabled: Boolean!
    icon: String
    id: String
    key: String!
    title: String
}

input MachineFirmwareSettingsInput {
    baudRate: BaudRate
    baudRateValue: Int!
    controllerType: MachineControllerType!
    downloadUrl: String
    edition: String
    helpUrl: String
    id: String
    name: String
    requiredVersion: Decimal!
    rtscts: Boolean!
    suggestedVersion: Decimal!
}

input MachineLogEntryFilterInput {
    and: [MachineLogEntryFilterInput!]
    code: ListFilterInputTypeOfSyntaxChunkFilterInput
    count: ComparableInt32OperationFilterInput
    error: MachineAlertFilterInput
    isResponse: BooleanOperationFilterInput
    logLevel: MachineLogLevelOperationFilterInput
    message: StringOperationFilterInput
    or: [MachineLogEntryFilterInput!]
    source: MachineLogSourceOperationFilterInput
    timestamp: ComparableDateTimeOperationFilterInput
    timestamps: ListComparableDateTimeOperationFilterInput
    writeState: SerialWriteStateOperationFilterInput
}

input MachineLogEntrySortInput {
    count: SortEnumType
    error: MachineAlertSortInput
    id: SortEnumType
    isResponse: SortEnumType
    logLevel: SortEnumType
    message: SortEnumType
    source: SortEnumType
    timestamp: SortEnumType
    writeState: SortEnumType
}

input MachineLogLevelOperationFilterInput {
    eq: MachineLogLevel
    in: [MachineLogLevel!]
    neq: MachineLogLevel
    nin: [MachineLogLevel!]
}

input MachineLogSourceOperationFilterInput {
    eq: MachineLogSource
    in: [MachineLogSource!]
    neq: MachineLogSource
    nin: [MachineLogSource!]
}

input MachinePartSettingsInput {
    dataBlob: String!
    description: String
    id: String
    isDefault: Boolean!
    optional: Boolean!
    partType: MachinePartType!
    settings: [MachineSettingSettingsInput!]!
    specs: [MachineSpecSettingsInput!]!
    title: String!
}

input MachineSettingSettingsInput {
    id: String!
    key: String!
    settingType: MachineSettingType!
    title: String
    value: String!
}

input MachineSpecSettingsInput {
    id: String!
    specType: MachineSpecType!
    value: Decimal!
}

input ModalChangeInput {
    code: String
    id: String!
    value: String!
}

input MoveCommandInput {
    a: Decimal
    b: Decimal
    c: Decimal
    distanceType: MovementDistanceType!
    motionType: MachineMotionType
    u: Decimal
    v: Decimal
    w: Decimal
    x: Decimal
    y: Decimal
    z: Decimal
}

input ProgramFileUploadInput {
    lastModified: Long!
    name: String!
    size: Long!
    text: String!
    type: String!
}

input ProgramInstructionSortInput {
    compiledInstruction: CompiledInstructionSortInput
    index: SortEnumType
}

input SerialPortOptionsInput {
    baudRate: Int!
    dataBits: Int
    handshake: Handshake
    parity: Parity
    readBufferSize: Int
    readTimeout: Int
    rtsEnable: Boolean
    stopBits: StopBits
    writeBufferSize: Int
    writeTimeout: Int
}

input SerialWriteStateOperationFilterInput {
    eq: SerialWriteState
    in: [SerialWriteState!]
    neq: SerialWriteState
    nin: [SerialWriteState!]
}

input StringOperationFilterInput {
    and: [StringOperationFilterInput!]
    contains: String
    endsWith: String
    eq: String
    in: [String]
    ncontains: String
    nendsWith: String
    neq: String
    nin: [String]
    nstartsWith: String
    or: [StringOperationFilterInput!]
    startsWith: String
}

input SyntaxChunkFilterInput {
    and: [SyntaxChunkFilterInput!]
    comment: StringOperationFilterInput
    comments: ListStringOperationFilterInput
    isCode: BooleanOperationFilterInput
    isValid: BooleanOperationFilterInput
    or: [SyntaxChunkFilterInput!]
    type: SyntaxTypeOperationFilterInput
    value: StringOperationFilterInput
}

input SyntaxLineSortInput {
    hasCode: SortEnumType
    isValid: SortEnumType
    raw: SortEnumType
}

input SyntaxTypeOperationFilterInput {
    eq: SyntaxType
    in: [SyntaxType!]
    neq: SyntaxType
    nin: [SyntaxType!]
}

input WorkspaceSettingsInput {
    autoReconnect: Boolean!
    axes: [MachineAxisSettingsInput!]!
    bkColor: String
    color: String
    commands: [MachineCommandSettingsInput!]!
    connection: ConnectionSettingsInput!
    features: [MachineFeatureSettingsInput!]!
    icon: String
    id: String!
    machineCategory: MachineCategory!
    machineProfileId: String
    name: String!
    onboarded: Boolean!
    parts: [MachinePartSettingsInput!]!
    path: String!
    preferImperial: Boolean!
}


"The built-in `Decimal` scalar type."
scalar Decimal

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long